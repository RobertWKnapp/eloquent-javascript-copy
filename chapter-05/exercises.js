// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arr) {
  return arr.reduce(function(accumulator, currentValue) {
    return accumulator.concat(currentValue);
}, []);
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
  while (test(value)) {
    body(value);
    value = update(value);
}
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, predicate) {
  for (var i = 0; i < array.length; i++) {
    if (!predicate(array[i])) {
        return false; // Return false if any element does not satisfy the predicate
    }
}
return true; // Return true if all elements satisfy the predicate
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(text) {
  let scripts = countBy(Array.from(text), char => {
    let script = characterScript(char.codePointAt(0));
    return script ? script.direction : null;
}).filter(({name}) => name); // Filter out nulls

if (scripts.length === 0) return "No dominant direction";

// Find the script with the maximum count
let dominant = scripts.reduce((a, b) => a.count > b.count ? a : b);
return dominant.name;
}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};