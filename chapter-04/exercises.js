////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = 1) {
  const result = [];

  // Return an empty array if start and end are the same
  if (start === end) {
      return [];
  }

  // If step is negative, ensure start > end
  if (step < 0 && start < end) {
      return [];
  }

  // If step is positive, ensure start < end
  if (step > 0 && start > end) {
      return [];
  }

  for (let i = start; step > 0 ? i <= end : i >= end; i += step) {
      result.push(i);
  }
  
  return result;
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(numbers) {
  return numbers.reduce((accumulator, current) => accumulator + current, 0);
}



////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  return arr.slice().reverse();
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  const len = arr.length;
  for (let i = 0; i < Math.floor(len / 2); i++) {
      // Swap elements
      const temp = arr[i];
      arr[i] = arr[len - 1 - i];
      arr[len - 1 - i] = temp;
  }
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(arr) {
  let list = null;

  // Iterate backwards through the array to build the list
  for (let i = arr.length - 1; i >= 0; i--) {
      list = { value: arr[i], rest: list };
  }

  return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
  const array = [];
  let current = list;

  // Iterate through the list
  while (current) {
      array.push(current.value);  // Add the current value to the array
      current = current.rest;      // Move to the next item in the list
  }

  return array;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return {
    value: element,
    rest: list
};

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, position) {
  let current = list;
  let index = 0;

  // Iterate through the list until reaching the desired position
  while (current) {
      if (index === position) {
          return current.value; // Return the value at the specified position
      }
      current = current.rest; // Move to the next item in the list
      index++;
  }

  return undefined; // Return undefined if position is out of bounds
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(a, b) {
    // Check if both values are the same reference
    if (a === b) return true;

    // Check if both are objects (and not null)
    if (a == null || b == null || typeof a !== 'object' || typeof b !== 'object') {
        return false;
    }

    const keysA = Object.keys(a);
    const keysB = Object.keys(b);

    // Check if the number of properties is different
    if (keysA.length !== keysB.length) {
        return false;
    }

    // Check properties recursively
    for (const key of keysA) {
        if (!keysB.includes(key) || !deepEqual(a[key], b[key])) {
            return false;
        }
    }

    return true; // All checks passed
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};